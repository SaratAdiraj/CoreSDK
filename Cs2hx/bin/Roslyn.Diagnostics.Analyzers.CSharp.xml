<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roslyn.Diagnostics.Analyzers.CSharp</name>
    </assembly>
    <members>
        <member name="M:Roslyn.Diagnostics.Analyzers.CSharp.Performance.LinqAnalyzer.IsTypeWithInefficientLinqMethods(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            The Enumerable.Last method will only special case indexable types that implement <see cref="T:System.Collections.Generic.IList`1" />.  Types 
            which implement only <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> will be treated the same as IEnumerable{T} and go through a 
            full enumeration.  This method identifies such types.
            
            At this point it only identifies <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> directly but could easily be extended to support
            any type which has an index and count property.  
            </summary>
        </member>
        <member name="M:Roslyn.Diagnostics.Analyzers.CSharp.Performance.LinqAnalyzer.TryNormalizeMethodCall(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.CodeAnalysis.IMethodSymbol@,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax@)">
            <summary>
            This method attempts to normalize out the difference between extension and non-extension
            method invocations.  It will return the non-extension method form of the <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol" />
            and the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" /> which corresponds to the first argument of that particular 
            form of the method
            </summary>
        </member>
        <member name="M:Roslyn.Diagnostics.Analyzers.CSharp.Performance.LinqAnalyzer.IsSingleParameterLinqMethod(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Is this a method on <see cref="T:System.Linq.Enumerable" /> which takes only a single parameter?
            </summary>
            <remarks>
            Many of the methods we target, like Last, have overloads that take a filter delegate.  It is 
            completely appropriate to use such methods even with <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.  Only the single parameter
            ones are suspect
            </remarks>
        </member>
        <member name="M:Roslyn.Diagnostics.Analyzers.CSharp.Performance.LinqAnalyzer.TryGetTargetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.TypeInfo@)">
            <summary>
            Get the TypeInfo value for the argument passed to Enumerable.Last.  This method needs to account 
            for both extension method syntax and direct call syntax
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Performance.CSharpEmptyArrayDiagnosticAnalyzer">
            <summary>Provides a C# analyzer that finds empty array allocations that can be replaced with a call to Array.Empty.</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Performance.CSharpEmptyArrayDiagnosticAnalyzer.expressionKinds">
            <summary>
            The kinds of array creation syntax kinds to be analyzed.  We care about ArrayCreationExpression (e.g. "new byte[2]" or "new byte[] { 1, 2, 3 }")
            and ArrayInitializerExpression (e.g. "byte[] arr = { }"), but not ImplicitArrayCreationExpression, because you can't have an
            implicitly typed array of length 0 (e.g. "new[] { }" is erroneous).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Performance.CSharpEmptyArrayDiagnosticAnalyzer.RegisterSyntaxNodeAction(Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext)">
            <summary>Called once at compilation start to register actions in the compilation context.</summary>
            <param name="context">The analysis context.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Performance.CSharpEmptyArrayCodeFixProvider">
            <summary>Provides a code fix for the EmptyArrayDiagnosticAnalyzer.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Performance.CSharpEmptyArrayCodeFixProvider.GetArrayType(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>Gets the ArrayTypeSyntax from a syntax node representing an empty array construction.</summary>
            <param name="nodeToFix">The syntax node.</param>
            <returns>The ArrayTypeSyntax if it could be extracted; otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Performance.CSharpEmptyArrayCodeFixProvider.InvokeStaticGenericParameterlessMethod(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)">
            <summary>Create an invocation expression for typeSymbol.methodName&lt;genericParameter&gt;()".</summary>
            <param name="typeSymbol">The type on which to invoke the static method.</param>
            <param name="methodName">The name of the static, parameterless, generic method.</param>
            <param name="genericParameter">the type to use for the method's generic parameter.</param>
            <returns>The resulting invocation expression.</returns>
        </member>
    </members>
</doc>
